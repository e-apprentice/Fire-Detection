#include <WiFi.h>
#include <WebServer.h>
#include <ArduinoJson.h>
#include <DHT.h>
#include <FS.h>
#include <SPIFFS.h>
#include <ESP_Mail_Client.h>

// WiFi credentials
const char* ssid = "Khalisisi";
const char* password = "khalicc@123";

// Email SMTP settings
#define SMTP_HOST "smtp.gmail.com"
#define SMTP_PORT 465
#define EMAIL_SENDER "agrimaregmi2004@gmail.com"
#define EMAIL_PASSWORD "sosjslvgcgjpindw"
#define EMAIL_RECIPIENT "pratistha.sapkota123@gmail.com"

// Sensor pins and setup
#define DHT_PIN 16
#define DHT_TYPE DHT22
#define MQ135_PIN 35
#define MQ2_PIN 4
#define IR_FLAME_PIN 5
#define BUZZER_PIN 18

DHT dht(DHT_PIN, DHT_TYPE);
WebServer server(80);

// Sensor data structure
struct SensorData {
  float temperature;
  float humidity;
  int airQuality;
  int airQualityRaw;
  int smokeLevel;
  int smokeRaw;
  bool flameDetected;
  String airQualityStatus;
  String smokeStatus;
  unsigned long timestamp;
  bool flameEmailSent;
};

// Calibration constants
const float MQ135_R0 = 10.0;
const float MQ2_R0 = 9.83;

// Global variables
SensorData currentData;

void setup() {
  Serial.begin(115200);
  
  // Initialize SPIFFS with more specific error handling
  if (!SPIFFS.begin(true)) {
    Serial.println("SPIFFS Mount Failed - continuing without file system");
  }
  
  // Initialize sensors
  dht.begin();
  pinMode(IR_FLAME_PIN, INPUT);
  
  // Initialize sensor data
  memset(&currentData, 0, sizeof(currentData));
  currentData.airQualityStatus = "Good";
  currentData.smokeStatus = "Safe";
  
  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  
  int wifiAttempts = 0;
  while (WiFi.status() != WL_CONNECTED && wifiAttempts < 20) {
    delay(500);
    Serial.print(".");
    wifiAttempts++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println();
    Serial.print("Connected! IP address: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("\nWiFi connection failed!");
  }
  
  // Setup web server routes
  setupRoutes();
  
  // Start server
  server.begin();
  Serial.println("Web server started");
  
  // Reduced warm-up time to save memory
  Serial.println("Warming up sensors... (10 seconds)");
  delay(10000);
  Serial.println("Sensors ready!");
}

void loop() {
  server.handleClient();
  
  // Read sensors every 3 seconds (increased interval to reduce load)
  static unsigned long lastRead = 0;
  if (millis() - lastRead > 3000) {
    readSensors();
    lastRead = millis();
  }
  
  // Check WiFi every 60 seconds (increased interval)
  static unsigned long lastWiFiCheck = 0;
  if (millis() - lastWiFiCheck > 60000) {
    checkWiFiConnection();
    lastWiFiCheck = millis();
  }
  
  // Yield to prevent watchdog reset
  yield();
}

void setupRoutes() {
  // CORS preflight
  server.onNotFound([]() {
    if (server.method() == HTTP_OPTIONS) {
      server.sendHeader("Access-Control-Allow-Origin", "*");
      server.sendHeader("Access-Control-Allow-Methods", "GET,POST,OPTIONS");
      server.sendHeader("Access-Control-Allow-Headers", "Content-Type");
      server.send(200);
    } else {
      server.send(404, "text/plain", "Not found");
    }
  });
  
  // Main dashboard - using PROGMEM to save RAM
  server.on("/", HTTP_GET, []() {
    server.sendHeader("Access-Control-Allow-Origin", "*");
    server.sendHeader("Cache-Control", "no-cache");
    
    // Serve compressed HTML
    const char* html = R"(<!DOCTYPE html>
<html>
<head>
<title>ESP32 Environmental Monitor</title>
<meta name="viewport" content="width=device-width,initial-scale=1">
<style>
body{font-family:Arial;margin:20px;background:#f0f0f0}
.container{background:white;padding:20px;border-radius:10px;box-shadow:0 2px 10px rgba(0,0,0,0.1);max-width:800px;margin:0 auto}
.sensor{margin:15px 0;padding:15px;border-radius:8px}
.safe{background:#d4edda;border-left:4px solid #28a745}
.warning{background:#fff3cd;border-left:4px solid #ffc107}
.danger{background:#f8d7da;border-left:4px solid #dc3545}
.value{font-size:1.3em;font-weight:bold;margin:5px 0}
.status{font-size:0.9em;color:#666}
.flame-alert{background:#dc3545;color:white;padding:15px;border-radius:5px;margin:10px 0;text-align:center;font-weight:bold;animation:blink 1s infinite}
@keyframes blink{50%{opacity:0.5}}
h1{text-align:center;color:#333}
h3{margin-top:0;color:#555}
.grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(300px,1fr));gap:15px}
@media(max-width:768px){.container{margin:10px;padding:15px}}
</style>
</head>
<body>
<div class="container">
<h1> ESP32 Environmental Monitor</h1>
<div id="flameAlert" class="flame-alert" style="display:none">
 FIRE DETECTED! EVACUATE IMMEDIATELY! 
</div>
<div class="grid">
<div class="sensor safe" id="tempHumSensor">
<h3> Temperature & Humidity</h3>
<div class="value">Temperature: <span id="temp">--</span>&deg;C</div>
<div class="value">Humidity: <span id="hum">--</span>%</div>
</div>
<div class="sensor safe" id="airSensor">
<h3> Air Quality (MQ135)</h3>
<div class="value">PPM: <span id="airQuality">--</span></div>
<div class="value">Raw: <span id="airQualityRaw">--</span></div>
<div class="status">Status: <span id="airStatus">--</span></div>
</div>
<div class="sensor safe" id="smokeSensor">
<h3> Smoke/Gas (MQ2)</h3>
<div class="value">Level: <span id="smokeLevel">--</span></div>
<div class="value">Raw: <span id="smokeRaw">--</span></div>
<div class="status">Status: <span id="smokeStatus">--</span></div>
</div>
<div class="sensor safe" id="flameSensor">
<h3> Flame Detection</h3>
<div class="value">Status: <span id="flameStatus">No flame detected</span></div>
</div>
</div>
</div>
<script>
function updateSensors(){
fetch('/sensors')
.then(r=>r.json())
.then(d=>{
document.getElementById('temp').textContent=d.temperature.toFixed(1);
document.getElementById('hum').textContent=d.humidity.toFixed(1);
document.getElementById('airQuality').textContent=d.airQuality;
document.getElementById('airQualityRaw').textContent=d.airQualityRaw;
document.getElementById('airStatus').textContent=d.airQualityStatus;
document.getElementById('smokeLevel').textContent=d.smokeLevel;
document.getElementById('smokeRaw').textContent=d.smokeRaw;
document.getElementById('smokeStatus').textContent=d.smokeStatus;
const fa=document.getElementById('flameAlert');
const fs=document.getElementById('flameStatus');
const fl=document.getElementById('flameSensor');
// if(d.flameDetected){
// fa.style.display='block';
// fs.textContent=' FLAME DETECTED!';
// fl.className='sensor danger';
// }else{
// fa.style.display='none';
// fs.textContent='No flame detected';
// fl.className='sensor safe';
// }
let flameTimeout;

if (d.flameDetected) {
  fa.style.display = 'block';
  fs.textContent = ' FLAME DETECTED!';
  fl.className = 'sensor danger';

  // Clear any previous timeout if flame is still detected
  if (flameTimeout) clearTimeout(flameTimeout);
} else {
  // Wait 10 seconds before hiding the alert if no flame
  if (!flameTimeout) {
    flameTimeout = setTimeout(() => {
      fa.style.display = 'none';
      fs.textContent = 'No flame detected';
      fl.className = 'sensor safe';
      flameTimeout = null;
    }, 20000); // 10 seconds delay
  }
}

document.getElementById('airSensor').className='sensor '+(d.airQuality>300?'danger':d.airQuality>150?'warning':'safe');
document.getElementById('smokeSensor').className='sensor '+(d.smokeLevel>500?'danger':d.smokeLevel>250?'warning':'safe');
})
.catch(e=>console.error('Error:',e));
}
updateSensors();
setInterval(updateSensors,3000);
</script>
</body>
</html>)";
    
    server.send(200, "text/html", html);
  });
  
  // Sensors endpoint - optimized JSON response
  server.on("/sensors", HTTP_GET, []() {
    server.sendHeader("Access-Control-Allow-Origin", "*");
    server.sendHeader("Content-Type", "application/json");
    server.sendHeader("Cache-Control", "no-cache");
    
    // Use smaller JSON document size
    DynamicJsonDocument doc(512);
    doc["temperature"] = round(currentData.temperature * 10) / 10.0;
    doc["humidity"] = round(currentData.humidity * 10) / 10.0;
    doc["airQuality"] = currentData.airQuality;
    doc["airQualityRaw"] = currentData.airQualityRaw;
    doc["airQualityStatus"] = currentData.airQualityStatus;
    doc["smokeLevel"] = currentData.smokeLevel;
    doc["smokeRaw"] = currentData.smokeRaw;
    doc["smokeStatus"] = currentData.smokeStatus;
    doc["flameDetected"] = currentData.flameDetected;
    doc["timestamp"] = millis();
    
    String response;
    serializeJson(doc, response);
    server.send(200, "application/json", response);
  });
  
  // Individual sensor endpoints (simplified)
  server.on("/temperature", HTTP_GET, []() {
    server.sendHeader("Access-Control-Allow-Origin", "*");
    server.send(200, "text/plain", String(currentData.temperature, 1));
  });
  
  server.on("/humidity", HTTP_GET, []() {
    server.sendHeader("Access-Control-Allow-Origin", "*");
    server.send(200, "text/plain", String(currentData.humidity, 1));
  });
  
  server.on("/flame", HTTP_GET, []() {
    server.sendHeader("Access-Control-Allow-Origin", "*");
    server.send(200, "text/plain", currentData.flameDetected ? "true" : "false");
  });
  
  // Status endpoint
  server.on("/status", HTTP_GET, []() {
    server.sendHeader("Access-Control-Allow-Origin", "*");
    server.sendHeader("Content-Type", "application/json");
    
    DynamicJsonDocument doc(256);
    doc["status"] = "online";
    doc["uptime"] = millis();
    doc["heap"] = ESP.getFreeHeap();
    doc["wifi"] = WiFi.RSSI();
    
    String response;
    serializeJson(doc, response);
    server.send(200, "application/json", response);
  });
}

void readSensors() {
  // Read DHT22 with error handling
  float temp = dht.readTemperature();
  float hum = dht.readHumidity();
  
  if (!isnan(temp) && !isnan(hum)) {
    currentData.temperature = temp;
    currentData.humidity = hum;
  }
  
  // Read MQ sensors
 // currentData.airQualityRaw = analogRead(MQ135_PIN);
  currentData.airQuality = calculateMQ135PPM(currentData.airQualityRaw);
  currentData.airQualityStatus = getAirQualityStatus(currentData.airQuality);
  
  currentData.smokeRaw = analogRead(MQ2_PIN);
  currentData.smokeLevel = calculateMQ2Level(currentData.smokeRaw);
  currentData.smokeStatus = getSmokeStatus(currentData.smokeLevel);
  
  // Read flame sensor
  currentData.flameDetected = !digitalRead(IR_FLAME_PIN);
  
  // Handle email sending for flame detection
  if (currentData.flameDetected && !currentData.flameEmailSent) {
    digitalWrite(BUZZER_PIN,HIGH)
    delay(4000);
    digitalWrite(BUZZER_PIN,LOW);
    if (WiFi.status() == WL_CONNECTED) {
      sendEmailAsync("FIRE DETECTED!", 
      "Warning: Fire detected by ESP32 Environmental Monitor!\n"
      "Location: https://www.google.com/maps/d/u/0/edit?mid=1Wy_MtSbTe-zJdu1AtTvg_CKsr96e4ZA&ll=27.754924033503357%2C85.34881577073087&z=18\n"
      "Campaign: Do not burn.Learn to seggregate.");
    
      
      currentData.flameEmailSent = true;
    }
  } else if (!currentData.flameDetected) {
    currentData.flameEmailSent = false;
  }
  
  currentData.timestamp = millis();
  
  // Debug output
  Serial.printf("T:%.1f H:%.1f AQ:%d(%d) S:%d(%d) F:%s\n", 
                currentData.temperature, currentData.humidity,
                currentData.airQuality, currentData.airQualityRaw,
                currentData.smokeLevel, currentData.smokeRaw,
                currentData.flameDetected ? "Y" : "N");
}

int calculateMQ135PPM(int rawValue) {
  if (rawValue == 0) return 0;
  float voltage = (rawValue / 4095.0) * 3.3;
  if (voltage >= 3.3) return 0;
  float rs = (3.3 - voltage) / voltage * 10000;
  float ratio = rs / MQ135_R0;
  float ppm = 116.6020682 * pow(ratio, -2.769034857);
  return constrain((int)ppm, 0, 2000);
}

int calculateMQ2Level(int rawValue) {
  if (rawValue == 0) return 0;
  float voltage = (rawValue / 4095.0) * 3.3;
  if (voltage >= 3.3) return 0;
  float rs = (3.3 - voltage) / voltage * 10000;
  float ratio = rs / MQ2_R0;
  float level = 1000 * pow(ratio, -1.5);
  return constrain((int)level, 0, 1000);
}

String getAirQualityStatus(int ppm) {
  if (ppm < 100) return "Excellent";
  else if (ppm < 150) return "Good";
  else if (ppm < 200) return "Fair";
  else if (ppm < 300) return "Poor";
  else return "Hazardous";
}

String getSmokeStatus(int level) {
  if (level < 100) return "Safe";
  else if (level < 250) return "Low";
  else if (level < 500) return "Moderate";
  else if (level < 750) return "High";
  else return "Dangerous";
}

void checkWiFiConnection() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi lost, reconnecting...");
    WiFi.begin(ssid, password);
    
    int attempts = 0;
    while (WiFi.status() != WL_CONNECTED && attempts < 10) {
      delay(500);
      attempts++;
    }
    
    if (WiFi.status() == WL_CONNECTED) {
      Serial.println("WiFi reconnected");
    }
  }
}

void sendEmailAsync(String subject, String body) {
  // Create email task that runs independently
  static bool emailInProgress = false;
  
  if (emailInProgress) {
    Serial.println("Email already in progress, skipping...");
    return;
  }
  
  emailInProgress = true;
  
  // Create and configure SMTP session
  SMTPSession* smtp = new SMTPSession();
  ESP_Mail_Session* session = new ESP_Mail_Session();
  SMTP_Message* message = new SMTP_Message();
  
  // Configure session
  session->server.host_name = SMTP_HOST;
  session->server.port = SMTP_PORT;
  session->login.email = EMAIL_SENDER;
  session->login.password = EMAIL_PASSWORD;
  
  // Configure message
  message->sender.name = "ESP32 Monitor";
  message->sender.email = EMAIL_SENDER;
  message->subject = subject;
  message->addRecipient("Alert", EMAIL_RECIPIENT);
  message->text.content = body.c_str();
  message->text.charSet = "utf-8";
  
  // Set callback for completion
  smtp->callback([](SMTP_Status status) {
    if (status.success()) {
      Serial.println("Email sent successfully");
    } else {
      Serial.print("Email loading.....: ");
      Serial.println(status.info());
    }
  });
  
  // Send email asynchronously
  if (smtp->connect(session)) {
    if (MailClient.sendMail(smtp, message)) {
      Serial.println("Email queued for sending");
    } else {
      Serial.println("Failed to queue email");
    }
    smtp->closeSession();
  } else {
    Serial.println("Failed to connect to SMTP server");
  }
  
  // Clean up
  delete smtp;
  delete session;
  delete message;
  
  emailInProgress = false;
}
